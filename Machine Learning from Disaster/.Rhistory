library(caret)
readData <- function(path.name, file.name, column.types, missing.types){
read.csv(paste(path.name, file.name, sep=''), colClasses = column.types, na.strings = missing.types )
}
Titanic.path <- ''
train.file.name <- 'train.csv'
test.file.name <- 'test.csv'
missing.types <- c('NA', '')
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]
train <- readData(Titanic.path, train.file.name, train.column.types, missing.types)
test <- readData(Titanic.path, test.file.name, test.column.types, missing.types)
test$Survived <- NA # add Survived column to test dataset and fill it out with NA.
setwd("~/Documents/Kaggle/Titanic")
train <- readData(Titanic.path, train.file.name, train.column.types, missing.types)
test <- readData(Titanic.path, test.file.name, test.column.types, missing.types)
test$Survived <- NA # add Survived column to test dataset and fill it out with NA.
combi <- rbind(train, test) # combine training and test set for further manipulation
library(ggplot2)
p <- ggplot(train, aes(x=Survived, fill=Sex)) + geom_bar(color='black')
p
# show histogram
# p3 <- ggplot(train[!is.na(train$Age), ], aes(x=Age, fill=Survived)) + geom_histogram()
# show density plot
p2 <- ggplot(train[-which(is.na(train$Age)), ], aes(x=Age, fill=Survived)) + geom_density(alpha=0.6) +
facet_grid(.~Sex)
p2
p3 <- ggplot(train, aes(x=Fare, fill=Survived)) + geom_histogram() +
facet_grid(.~Pclass)
p3
prop.table(table(train$Survived, train$Pclass), margin = 2)
p4 <- ggplot(train[!is.na(train$Embarked), ], aes(x=Survived, fill=Embarked)) + geom_bar(color='black')
p4
title.extract <- function(x){
strsplit(x, split = "[,.]")[[1]][2]
}
combi$Title <- sapply(combi$Name, FUN = title.extract)
combi$Title <- sub(" ", "", combi$Title) # delete the space in the Title
# combine the similiar into the same category
combi$Title[combi$PassengerId == 797] <- 'Mrs' # this passenger is a female doctor
combi$Title[combi$Title %in% c('Mlle', 'Mme')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt','Don','Major','Sir', 'Jonkheer')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'lady'
combi$Title <- as.factor(combi$Title)
combi$Surname <- sapply(combi$Name, FUN = function(x){strsplit(x, split="[,.]")[[1]][1]})
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = "")
combi$FamilyID[combi$FamilySize <= 2] <- "Small"
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
# if famIDs frequency <=2, regard it as "Small" as well.
combi$FamilyID[combi$FamilyID %in% famIDs$Var1 ] <- "Small"
combi$FamilyID <- as.factor(combi$FamilyID)
# We write a function to extract the first letter of Cabin. A new factor 'N' is assigned to the missing values. Also, for the passengers with the same ticket number, the most frequent Cabin level besides 'N' is assigned to the rest passengers.
extractCabin <- function(combi){
# extract the first letter of Cabin
combi$Cabin <- sapply(combi$Cabin, FUN = function(x){strsplit(x, split='')[[1]][1]})
combi$Cabin[is.na(combi$Cabin)] <- 'N'
combi$Cabin <- as.factor(combi$Cabin)
# set the same number tickets with the same Cabin label
combi.ticket <- table(factor(combi$Ticket))
combi.ticket.moreThanOne <- combi.ticket[combi.ticket>1]
combi.temp <- combi[combi$Ticket %in% names(combi.ticket.moreThanOne), ]
for(name in names(combi.ticket.moreThanOne)){
row.sameTicket <- combi[combi$Ticket == name, ]
Cabin_boolean <- row.sameTicket$Cabin %in% c('A','B','C','D','E','F','G')
if(sum(Cabin_boolean) > 0){
correctCabin <- names(sort(table(row.sameTicket$Cabin[Cabin_boolean]), decreasing=TRUE))[1]
row.sameTicket$Cabin[row.sameTicket$Cabin == "N"] <- correctCabin
# modify the Cabin of combi dataset
combi$Cabin[row.sameTicket$PassengerId] <- row.sameTicket$Cabin
}
}
combi$Cabin <- as.factor(combi$Cabin)
return(combi)
}
extractTicket <- function(ticket){
pattern <- c('\\/', '\\.', '\\s', '[[:digit:]]')
for (p in pattern){
# replace all chracter matches the pattern p with ""
ticket <- gsub(p, "", ticket)
}
ticket <- substr(toupper(ticket), 1,1) # only extract the first alphabet character to label the ticket
ticket[ticket==""] <- 'N'
ticket <- as.factor(ticket)
}
combi$Ticket <- extractTicket(combi$Ticket)
combi$Fare[is.na(combi$Fare)] <- median(combi$Fare, na.rm = TRUE)
combi$Embarked[is.na(combi$Embarked)] <- "S"
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age), ], method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
train <- combi[1:nrow(train), ]
test <- combi[nrow(train)+1 : nrow(test), ]
extractFeatures <- function(data){
features <- c('Pclass',
'Sex',
'Age',
'SibSp',
'Parch',
'Fare',
#'Cabin',
'Embarked',
'Survived',
'Title',
'FamilySize',
'FamilyID'
#'Ticket'
)
fea <- data[ , features]
return(fea)
}
combi <- extractCabin(combi)
install.packages('glmnet')
library(glmnet)
x <- model.matrix(Survived~., data = extractFeatures(train))
y <- extractFeatures(train)$Survived
newx <- model.matrix(~., data = extractFeatures(test)[,-which(names(extractFeatures(test)) %in% 'Survived')])
set.seed(1)
fit_ridge <- cv.glmnet(x, y, alpha = 0, family = 'binomial', type.measure = 'deviance')
pred_ridge <- predict(fit_ridge, newx = newx, s = 'lambda.min', type='class')
submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_ridge)
write.csv(submission, file = "ridge.csv", row.names=FALSE)
install.packages('caret')
library(caret)
install.packages("caret")
fitControl <- trainControl(method = 'repeatedcv',
number = 3,
repeats = 3)
AddCabinFeatures <- function(df) {
CabinLevels <- c("NA", "A","B","C","D","E", "F", "G", "T")
CabinLevel <- gsub('^([A-G]).*$', '\\1', df$Cabin)
df$CabinLevel <- factor(CabinLevel, levels=CabinLevels)
CabinRoom <- gsub('^[^0-9]+([1-9]+).*$', '\\1', df$Cabin)
CabinRoom <- ifelse(CabinRoom=="", "0", CabinRoom)
suppressWarnings(CabinRoom <- as.integer(CabinRoom))
df$CabinRoom <- ifelse(is.na(CabinRoom), 0, CabinRoom)
df
}
setwd("~/Documents/Kaggle/Titanic")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Join together the test and train sets for easier feature engineering
test$Survived <- NA
combi <- rbind(train, test)
# Convert to a string
combi$Name <- as.character(combi$Name)
# Engineered variable: Title
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
# Combine small title groups
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# Convert to a factor
combi$Title <- factor(combi$Title)
# Engineered variable: Family size
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Engineered variable: Family
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
# Delete erroneous family IDs
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
# Convert to a factor
combi$FamilyID <- factor(combi$FamilyID)
# Fill in Age NAs
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
which(combi$Embarked == '')
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
# Fill in Fare NAs
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
# New factor for Random Forests, only allowed <32 levels, so reduce number
combi$FamilyID2 <- combi$FamilyID
# Convert back to string
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
# And convert back to factor
combi$FamilyID2 <- factor(combi$FamilyID2)
#Scale Age and Fare
combi$Age <- scale(combi$Age)
combi$Fare <- scale(combi$Fare)
# Taking care of Cabin
combi <- AddCabinFeatures(combi)
deckNA <- combi[!is.na(combi$CabinLevel),]
combi$CabinLevel[is.na(combi$CabinLevel)] <- sapply(combi$Ticket[is.na(combi$CabinLevel)], FUN=function(x) { deckNA$CabinLevel[deckNA$Ticket == x][1] } )
combi$CabinLevel[combi$Pclass == 1 & is.na(combi$CabinLevel)] <- "C"
combi$CabinLevel[combi$Pclass == 2 & is.na(combi$CabinLevel)] <- "F"
combi$CabinLevel[combi$Pclass == 3 & is.na(combi$CabinLevel)] <- "F"
# Taking care of Ticket Number
combi$TicketPrefix <- gsub('^(.*\\s).*$', '\\1', toupper(combi$Ticket) )
combi$TicketPrefix <- gsub('(\\s)|(\\.)|(\\/)', '',  combi$TicketPrefix)
combi$TicketPrefix <- gsub('\\d{2,}', 'NA',  combi$TicketPrefix)
combi$TicketSufix <- gsub("(.*\\s)|(\\D)","" ,gsub("STON/O 2.","STON/O2.", combi$Ticket))
combi$TicketPrefix <- factor(combi$TicketPrefix)
suppressWarnings(combi$TicketSufix <- as.numeric(combi$TicketSufix))
# Split back into test and train sets
train <- combi[1:891,]
test <- combi[892:1309,]
View(train)
write.csv(train, file = "train_mod.csv", row.names = FALSE)
write.csv(test, file = "test_mod.csv", row.names = FALSE)
setwd("~/Documents/Kaggle/Titanic")
source('titanic_preprocessing.R')
setwd("~/Documents/Kaggle/Titanic")
train <- read.csv("Data/train.csv")
test <- read.csv("Data/test.csv")
setwd("~/Documents/Kaggle/Titanic")
source('titanic_preprocessing.R')
library(rpart)
setwd("~/Documents/Kaggle/Titanic")
source('titanic_preprocessing.R')
setwd("~/Documents/Kaggle/Titanic")
source('titanic_preprocessing.R')
library(randomForest)
View(test)
library(randomForest)
# Build condition inference tree Random Forest
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLevel + CabinRoom + TicketPrefix + TicketSufix,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
# Now let's make a prediction and write a submission file
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforest.csv", row.names = FALSE)
Prediction_train <- predict(fit, train, OOB=TRUE, type = "response")
Result <- mean(train$Survived == Prediction_train)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLevel + CabinRoom + TicketPrefix + TicketSufix,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
# Now let's make a prediction and write a submission file
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforest.csv", row.names = FALSE)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLevel + CabinRoom + TicketPrefix + TicketSufix,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
library(randomForest)
library(party)
# Build condition inference tree Random Forest
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLevel + CabinRoom + TicketPrefix + TicketSufix,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction_train <- predict(fit, train, OOB=TRUE, type = "response")
Result <- mean(train$Survived == Prediction_train)
Result
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforest.csv", row.names = FALSE)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLevel + CabinRoom,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforest.csv", row.names = FALSE)
Prediction_train <- predict(fit, train, OOB=TRUE, type = "response")
Result <- mean(train$Survived == Prediction_train)
Result
# make a function called multiply_a_b
multiply_a_b <- function(a, b){
return (a * b)
}
# call the function multiply_a_b and store the result into a variable result
result <- multiply_a_b(a = 3, b = 7)
result
cars <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars.csv")
head(cars)
str(cars)
dim(cars)
tail(cars)
# load in the dataset
cars <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars_semicolon.csv", sep = ";")
# print the first 6 rows of the dataset
head(cars)
getwd()
# list all the files in the working directory
list.files()
# read in the cars dataset and store it in a variable called cars
cars <- read.csv("cars.csv", sep = ";")
# print the first 6 rows of cars
head(cars)
library(ggplot2)
str(cars)
#Assign the value of mtcars to the new variable mtcars2
mtcars2 <- mtcars
#Assign the label "high" to mpgcategory where mpg is greater than or equal to 20
mtcars2$mpgcategory[mtcars2$mpg >= 20] <- "high"
#Assign the label "low" to mpgcategory where mpg is less than 20
mtcars2$mpgcategory[mtcars2$mpg < 20] <- "low"
#Assign mpgcategory as factor to mpgfactor
mtcars2$mpgfactor <- as.factor(mtcars2$mpgcategory)
table(mtcars$am)
#Assign the frequency of the mtcars variable "am" to a variable called "height"
height <- table(mtcars$am)
#Create a barplot of "height"
barplot(height)
# vector of bar heights
height <- table(mtcars$am)
# Make a vector of the names of the bars called "barnames"
barnames <- c("automatic", "manual")
# Label the y axis "number of cars" and label the bars using barnames
barplot(height, ylab = "number of cars", names.arg = barnames)
# Make a histogram of the carb variable from the mtcars data set. Set the title to "Carburetors"
hist(mtcars$carb, main = "Carburetors")
# arguments to change the y-axis scale to 0 - 20, label the x-axis and colour the bars red
hist(mtcars$carb, main = "Carburetors", ylim = c(0, 20), col = "red", xlab = "Number of Carburetors")
# Calculate the mean miles per gallon
mean(mtcars$mpg)
# Calculate the median miles per gallon
median(mtcars$mpg)
# Produce a sorted frequency table of `carb` from `mtcars`
sort(table(mtcars$carb), decreasing = TRUE)
# Minimum value
x <- min(mtcars$mpg)
# Maximum value
y <- max(mtcars$mpg)
# Calculate the range of mpg using x and y
range <- y - x
range
quantile(mtcars$qsec)
first <- quantile(mtcars$qsec)[[2]][1]
third <- quantile(mtcars$qsec)[[4]][1]
# Make a boxplot of qsec
boxplot(mtcars$qsec)
# Calculate the interquartile range of qsec
IQR(mtcars$qsec)
1.5*IQR(mtcars$qsec) + third
first - 1.5*IQR(mtcars$qsec)
Find the IQR of horsepower
IQR(mtcars$hp)
# Find the standard deviation of horsepower
sd(mtcars$hp)
# Find the IQR of miles per gallon
IQR(mtcars$mpg)
# Find the standard deviation of miles per gallon
sd(mtcars$mpg)
# Calculate the z-scores of mpg
(mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg)
# Our data
money <- c(1,2,3,4,5,6,7,8,9,10)
prosocial <- c(3, 2, 1, 4, 5, 10, 8, 7, 6,9)
# Find the regression coefficients
lm(prosocial ~ money)
# Your plot
plot(money, prosocial, xlab = "Money", ylab = "Prosocial Behavior")
# Store your regression coefficients in a variable called "line"
line <- lm(prosocial ~ money)
# Use "line" to tell abline() to make a line on your graph
abline(line)
# your data
money <- c(4, 3, 2, 2, 8, 1, 1, 2, 3, 4, 5, 6, 7, 9, 9, 8, 12)
education <- c(3, 4, 6, 9, 3, 3, 1, 2, 1, 4, 5, 7, 10, 8, 7, 6, 9)
# calculate the correlation between X and Y
cor(money,education)
# save regression coefficients as object "line"
line <- lm(money ~ education)
# print the regression coefficients
line
# plot Y and X
plot(education,money, main = "My Scatterplot")
# add the regression line
abline(line)
# simulating data
set.seed(11225)
data <- rnorm(10000)
# check for documentation of the dnorm function
help(dnorm)
# calculate the density of data and store it in the variable density
density <- dnorm(data)
# make a plot with as x variable data and as y variable density
plot(data,density)
# probability that x is smaller or equal to two
prob <- 0.6
